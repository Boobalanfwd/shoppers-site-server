// ---------------- PRISMA CONFIG ----------------
generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- USER ----------------
model User {
  id           String            @id @default(uuid())
  name         String?
  email        String            @unique
  passwordHash String?
  createdAt    DateTime          @default(now())
  updatedAt    DateTime          @updatedAt

  // Relations
  otps          OtpCode[]
  orders        Order[]
  notifications Notification[]
  addresses     ShippingAddress[]
  cart          Cart?
}

// ---------------- OTP CODES ----------------
model OtpCode {
  id         String   @id @default(uuid())
  user       User     @relation(fields: [userId], references: [id])
  userId     String
  codeHash   String   // store hashed OTP for security
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  used       Boolean  @default(false)

  @@index([userId])
  @@index([expiresAt])
}

// ---------------- PRODUCTS ----------------
model Product {
  id          String             @id @default(uuid())
  name        String
  description String?
  category    String?
  brand       String?
  imageUrl    String?
  discount    Decimal?           @db.Decimal(10,2) // amount or percentage
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt

  variantCombinations VariantAttribute[]
}

// ---------------- VARIANT TYPES ----------------
model Variant {
  id          String       @id @default(uuid())
  title       String       // e.g., "Size", "Color"
  description String?
  attributes  Attribute[]
}

// ---------------- VARIANT ATTRIBUTE VALUES ----------------
model Attribute {
  id          String     @id @default(uuid())
  variant     Variant    @relation(fields: [variantId], references: [id])
  variantId   String
  title       String     // e.g., "S", "Red"
  description String?
}

// ---------------- PRODUCT VARIANT COMBINATIONS ----------------
model VariantAttribute {
  id          String     @id @default(uuid())
  product     Product    @relation(fields: [productId], references: [id])
  productId   String

  attributes  String[]   // list of Attribute IDs for this combination
  price       Decimal    @db.Decimal(10,2)
  stock       Int        @default(0)
  discount    Decimal?   @db.Decimal(10,2)

  cartItems   CartItem[]
  orderItems  OrderItem[]
}

// ---------------- ORDERS ----------------
model Order {
  id              String         @id @default(uuid())
  user            User           @relation(fields: [userId], references: [id])
  userId          String
  status          String         @default("pending") // pending, confirmed, shipped, delivered, cancelled
  totalPrice      Decimal        @db.Decimal(10,2)
  paymentMethod   String         @default("cod")

  // Shipping snapshot
  shippingName    String
  shippingPhone   String
  shippingLine1   String
  shippingLine2   String?
  shippingCity    String
  shippingState   String
  shippingPostal  String
  shippingCountry String

  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  items           OrderItem[]
}

model OrderItem {
  id            String           @id @default(uuid())
  order         Order            @relation(fields: [orderId], references: [id])
  orderId       String
  combination   VariantAttribute @relation(fields: [combinationId], references: [id])
  combinationId String
  quantity      Int
  price         Decimal          @db.Decimal(10,2) // snapshot price
}

// ---------------- SHIPPING ADDRESS ----------------
model ShippingAddress {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  fullName     String
  phone        String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

// ---------------- NOTIFICATIONS ----------------
model Notification {
  id         String   @id @default(uuid())
  user       User?    @relation(fields: [userId], references: [id])
  userId     String?
  type       String
  title      String
  message    String
  isRead     Boolean  @default(false)
  createdAt  DateTime @default(now())

  @@index([userId])
}

// ---------------- CART ----------------
model Cart {
  id        String     @id @default(uuid())
  user      User       @relation(fields: [userId], references: [id])
  userId    String     @unique // one active cart per user
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  items     CartItem[]
}

model CartItem {
  id            String           @id @default(uuid())
  cart          Cart             @relation(fields: [cartId], references: [id])
  cartId        String
  combination   VariantAttribute @relation(fields: [combinationId], references: [id])
  combinationId String
  quantity      Int              @default(1)
  price         Decimal          @db.Decimal(10,2) // snapshot price

  @@unique([cartId, combinationId]) // prevent duplicate variant in same cart
}
