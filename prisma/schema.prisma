// ---------------- PRISMA CONFIG ----------------
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// ---------------- ENUMS ----------------
enum UserRole {
  admin
  customer
}

enum Gender {
  male
  female
  other
}

// ---------------- USER ----------------
model User {
  id           String    @id @default(uuid())
  name         String?
  email        String    @unique
  passwordHash String?
  role         UserRole  @default(customer)
  gender       Gender?
  dob          DateTime?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt

  otps          OtpCode[]
  orders        Order[]
  notifications Notification[]
  addresses     ShippingAddress[]
  cart          Cart?
}

// ---------------- OTP CODES ----------------
model OtpCode {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  codeHash  String
  expiresAt DateTime
  createdAt DateTime @default(now())
  used      Boolean  @default(false)

  @@index([userId])
  @@index([expiresAt])
}

// ---------------- CATEGORY ----------------
model Category {
  id       String     @id @default(uuid())
  name     String
  slug     String     @unique
  parentId String?
  parent   Category?  @relation("CategoryChildren", fields: [parentId], references: [id])
  children Category[] @relation("CategoryChildren")
  products Product[]
}

// ---------------- PRODUCT TYPE ----------------
model ProductType {
  id                 String                 @id @default(uuid())
  name               String
  slug               String                 @unique
  hasVariants        Boolean?                @default(true)
  productAttributes  ProductTypeAttribute[]
  variantAttributes  VariantAttribute[]
  products           Product[]
}

// ---------------- ATTRIBUTE SYSTEM ----------------
model Attribute {
  id                     String                  @id @default(uuid())
  name                   String
  slug                   String                  @unique
  values                 AttributeValue[]
  productTypeAttributes  ProductTypeAttribute[]
  variantAttributes      VariantAttribute[]
  variantAttributeValues VariantAttributeValue[]
}

model AttributeValue {
  id                     String                  @id @default(uuid())
  value                  String
  attributeId            String
  attribute              Attribute               @relation(fields: [attributeId], references: [id])
  variantAttributeValues VariantAttributeValue[]
}

model ProductTypeAttribute {
  id            String     @id @default(uuid())
  productTypeId String
  attributeId   String
  productType   ProductType @relation(fields: [productTypeId], references: [id])
  attribute     Attribute   @relation(fields: [attributeId], references: [id])
}

model VariantAttribute {
  id            String     @id @default(uuid())
  productTypeId String
  attributeId   String
  productType   ProductType @relation(fields: [productTypeId], references: [id])
  attribute     Attribute   @relation(fields: [attributeId], references: [id])
}

// ---------------- PRODUCT ----------------
model Product {
  id            String           @id @default(uuid())
  name          String
  slug          String           @unique
  description   String?
  productTypeId String
  categoryId    String?
  productType   ProductType      @relation(fields: [productTypeId], references: [id])
  category      Category?        @relation(fields: [categoryId], references: [id])
  variants      ProductVariant[]
}

// ---------------- PRODUCT VARIANT ----------------
model ProductVariant {
  id         String       @id @default(uuid())
  name       String
  sku        String    @unique
  price      Decimal   @db.Decimal(10, 2)
  stock      Int       @default(0)
  productId  String
  product    Product   @relation(fields: [productId], references: [id])
  attributes VariantAttributeValue[]
  cartItems  CartItem[]
  orderItems OrderItem[]
}
// ---------------- VARIANT ATTRIBUTE VALUES ----------------
model VariantAttributeValue {
  id               String         @id @default(uuid())
  variantId        String
  attributeId      String
  attributeValueId String
  variant          ProductVariant @relation(fields: [variantId], references: [id])
  attribute        Attribute      @relation(fields: [attributeId], references: [id])
  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id])
}

// ---------------- ORDERS ----------------
model Order {
  id              Int      @id @default(autoincrement())
  user            User     @relation(fields: [userId], references: [id])
  userId          String
  status          String   @default("pending")
  totalPrice      Decimal  @db.Decimal(10, 2)
  paymentMethod   String   @default("cod")
  shippingName    String
  shippingPhone   String
  shippingLine1   String
  shippingLine2   String?
  shippingCity    String
  shippingState   String
  shippingPostal  String
  shippingCountry String
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt

  items OrderItem[]
}

model OrderItem {
  id            String         @id @default(uuid())
  order         Order          @relation(fields: [orderId], references: [id])
  orderId       Int
  combination   ProductVariant @relation(fields: [combinationId], references: [id])
  combinationId String
  quantity      Int
  price         Decimal        @db.Decimal(10, 2)
}

// ---------------- SHIPPING ADDRESS ----------------
model ShippingAddress {
  id           String   @id @default(uuid())
  user         User     @relation(fields: [userId], references: [id])
  userId       String
  fullName     String
  phone        String
  addressLine1 String
  addressLine2 String?
  city         String
  state        String
  postalCode   String
  country      String
  isDefault    Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@index([userId])
}

// ---------------- NOTIFICATIONS ----------------
model Notification {
  id        String   @id @default(uuid())
  user      User?    @relation(fields: [userId], references: [id])
  userId    String?
  type      String
  title     String
  message   String
  isRead    Boolean  @default(false)
  createdAt DateTime @default(now())

  @@index([userId])
}

// ---------------- CART ----------------
model Cart {
  id        String   @id @default(uuid())
  user      User     @relation(fields: [userId], references: [id])
  userId    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  items CartItem[]
}

model CartItem {
  id            String         @id @default(uuid())
  cart          Cart           @relation(fields: [cartId], references: [id])
  cartId        String
  combination   ProductVariant @relation(fields: [combinationId], references: [id])
  combinationId String
  quantity      Int            @default(1)
  price         Decimal        @db.Decimal(10, 2)

  @@unique([cartId, combinationId])
}
